extern crate tokio;
extern crate cfonts;

use cfonts::{ Options, Align, Fonts, render };
use std::io;

use structopt::StructOpt;
use parity_scale_codec::{Encode, Decode};
use reqwest::{Client};
use reqwest::Error as ReqError;
use parity_scale_codec::Error as CodecError;
use serde_json::json;
use sp_core::{hexdisplay::HexDisplay};

#[derive(Debug)]
enum CliError {
    ReqError(ReqError),
    CodecError(CodecError),
}

impl From<ReqError> for CliError {
    fn from(e: ReqError) -> Self {
        CliError::ReqError(e)
    }
}

impl From<CodecError> for CliError {
    fn from(e: CodecError) -> Self {
        CliError::CodecError(e)
    }
}

#[derive(Encode, Decode, Debug)]
struct ReturnData {
    data: u32,
}

#[derive(StructOpt)]
pub struct Opts {
    #[structopt(required = true)]
    action: String,
}

#[cfg_attr(feature = "std", derive(Serialize, Deserialize, parity_util_mem::MallocSizeOf))]
#[derive(Debug, Encode, Decode, PartialEq, Eq, Clone)]
pub struct BasicExtrinsic(Call);

#[cfg_attr(feature = "std", derive(Serialize, Deserialize, parity_util_mem::MallocSizeOf))]
#[derive(Encode, Decode, Debug, PartialEq, Eq, Clone)]
pub enum Call {
	SetValue(u32),
	AddAccount(u8, u128),
	Transfer(u8, u8, u128),
}

#[tokio::main]
async fn main() -> Result<(), CliError> {
    // multiline string
    let logo = r#"
    [0;37;5;47;107m                                                                                                                                                      [0m
    [0;37;5;47;107m  .  . .  .  . .  .  . .  .  . .  .  . .  .  . .  .  . .  .  . .  .  . .  .  . .  .  . .  .  . .  .  . .  .  . .  .  . .  .  . .  .  . .  .  . .  .  .[0m
    [0;37;5;47;107m   .       .       .       .       .       .       .       .       .       .       .       .       .       .       .       .       .       .       .  [0m
    [0;37;5;47;107m     .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .     [0m
    [0;37;5;47;107m .       .  ..::. .      .       .       .       .       .       .       .       .       .       .       .       .       .       .       .       .  . [0m
    [0;37;5;47;107m   .  .  ;[0;1;37;97;47mX[0;1;35;95;47m8[0;35;47m8[0;35;5;41;101m.[0;1;35;95;47m8[0;1;31;91;45m8[0;1;35;95;47m8[0;35;47m8[0;1;37;97;47m [0;37;5;47;107m@. .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  [0m
    [0;37;5;47;107m  .    .:[0;1;35;95;47m8[0;35;5;41;101m:[0;1;35;95;45m.[0;37;5;45;105m8[0;35;5;41;101m:[0;1;35;95;47m8[0;35;5;41;101m;[0;35;47m8[0;1;35;95;5;41;101m88[0;1;35;95;45m.[0;37;5;47;107m8.    .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .  .    .      [0m
    [0;37;5;47;107m   :[0;1;37;97;47m8[0;1;35;95;47mX[0;1;37;97;47m:[0;37;5;47;107m;:[0;1;37;97;47mt[0;35;5;45;105m [0;33;5;41;101m [0;35;47m8[0;37;5;45;105m@[0;35;5;41;101mt[0;1;35;95;47m8[0;35;5;41;101m [0;1;35;95;47m8[0;35;5;41;101m:[0;1;35;95;47m%[0;37;5;47;107mX 8[0;1;35;95;47mX[0;1;37;97;47m.[0;37;5;47;107mS.  .      .   .t[0;1;37;97;47m8S:.;@[0;37;5;47;107mS.  .       .       .   :%. . :%.   .       .       .       .       . .t;   .       .       .    .  . [0m
    [0;37;5;47;107m :[0;1;37;97;47mS[0;35;5;45;105m:[0;35;5;41;101mt[0;35;47m8[0;1;35;95;5;41;101m8[0;1;35;95;47mX[0;37;5;47;107m%:%[0;1;37;97;47m:[0;1;35;95;47mX[0;1;31;91;47m@[0;1;35;95;47m88X[0;1;37;97;47m [0;37;5;47;107m@% 8[0;1;35;95;5;41;101m8[0;35;5;41;101m [0;37;5;45;105mX[0;35;5;41;101m:[0;1;37;97;47m8[0;37;5;47;107mX   . .    .:[0;37;5;40;100mX[0;1;30;90;40mS[0;34;40m:[0;32;40m:[0;31;40m.[0;34;40m.[0;32;40m.[0;31;40m:[0;34;40mt[0;30;5;40;100mX[0;33;5;40;100m [0;1;37;97;47mX[0;37;5;47;107m:  . .    . .    . [0;1;37;97;47m@[0;30;5;40;100m8[0;1;30;90;40m%[0;36;5;40;100m [0;37;5;47;107m  [0;1;37;97;47m@[0;30;5;40;100m8[0;1;30;90;40mS[0;36;5;40;100m [0;37;5;47;107m     . .    .  .    .  .    .  .    .[0;37;5;40;100m8[0;1;30;90;40mX8[0;1;37;97;47m%[0;37;5;47;107m   .  .    .  .   ..  .     [0m
    [0;37;5;47;107m%[0;1;35;95;47m8[0;35;5;41;101m;[0;35;47m8[0;35;5;41;101m [0;37;5;45;105m8[0;35;5;41;101m;[0;1;35;95;47m8[0;37;5;47;107m%  .   .:%  .[0;1;37;97;47mt[0;35;5;45;105m [0;35;47m8[0;35;5;41;101m.[0;37;5;45;105m8[0;1;31;91;45m8[0;35;5;45;105m.[0;1;37;97;47mt[0;37;5;47;107m:.    .   [0;1;37;97;47mt[0;34;40m:[0;32;40m.[0;1;30;90;40mX[0;1;30;90;47m@..:S[0;33;5;40;100m [0;1;30;90;40m8[0;32;40m.[0;31;40m.[0;36;5;40;100m:[0;37;5;47;107m@     .      .   .[0;36;5;40;100m [0;34;40m.[0;32;40m.[0;37;5;40;100mX[0;37;5;47;107m..[0;35;5;40;100m [0;31;40m.[0;34;40m.[0;37;5;40;100mS[0;37;5;47;107m.  .     .    .  .    .  .    .  .  [0;1;37;97;47m8[0;1;30;90;40mS[0;34;40m ;[0;1;37;97;47m@[0;37;5;47;107m.      . .     . [0;1;37;97;47m [0;30;5;40;100m88[0;1;30;90;47m [0;37;5;47;107m   . . [0m
    [0;1;35;95;47mS[0;35;5;41;101m;[0;1;35;95;47m8[0;1;31;91;45m8[0;1;35;95;47m8[0;35;5;41;101m;[0;1;35;95;47m8S[0;37;5;47;107m    .   ...  8[0;35;5;41;101m [0;1;35;95;47m8[0;1;31;91;45m8[0;35;47m8[0;35;5;41;101m [0;35;47m8[0;1;35;95;5;41;101m8[0;37;5;47;107m.       . [0;37;5;40;100m8[0;31;40m..[0;33;5;40;100m [0;37;5;47;107m.     [0;1;37;97;47m8[0;1;30;90;40m8[0;31;40m  [0;37;5;40;100m8[0;37;5;47;107m  .    .  .   . X[0;1;30;90;40m8[0;31;40m.[0;34;40m.[0;1;37;97;47m.[0;37;5;47;107m S[0;1;30;90;40m8[0;32;40m.[0;31;40m.[0;1;37;97;47m.[0;37;5;47;107m     .    .       .       .       . [0;1;30;90;47mS[0;34;40m [0;32;40m [0;30;5;40;100mS[0;37;5;47;107mt  . .       .   ;[0;36;5;40;100mt[0;31;40m  [0;1;30;90;47m8[0;37;5;47;107m .     [0m
    [0;37;45m@[0;1;35;95;45m:[0;37;5;41;101m8[0;37;5;45;105m@[0;35;5;41;101m;[0;1;35;95;47m8[0;1;31;91;47m8[0;37;5;47;107m8. .   .  .. . 8[0;35;5;41;101m [0;37;5;45;105m8[0;35;5;41;101m.[0;37;5;45;105m8[0;35;5;41;101m:[0;1;35;95;47m8[0;1;37;97;47m.[0;37;5;47;107m. .  .  t[0;30;5;40;100mX[0;32;40m .[0;1;30;90;47mt[0;37;5;47;107m       [0;1;30;90;47mX[0;31;40m  [0;33;5;40;100m%[0;37;5;47;107mS   ..t%t:      [0;1;37;97;47m.[0;32;40m.[0;34;40m.[0;1;30;90;40m8[0;37;5;47;107mX [0;1;37;97;47m.[0;34;40m.[0;31;40m.[0;1;30;90;40m8[0;37;5;47;107mX . . ;t.    . :SSS:. .  .   . :%%t.:[0;36;5;40;100m.[0;31;40m  [0;37;5;40;100m8[0;37;5;47;107m      :tSt..   ..[0;1;37;97;47mX[0;31;40mt[0;34;40m [0;31;40m:[0;1;37;97;47mX[0;37;5;47;107m...  . [0m
    [0;35;47m8[0;1;35;95;5;41;101m8[0;35;47m8[0;35;5;41;101m [0;1;35;95;47m@[0;1;37;97;47m.[0;37;5;47;107m:..   .     .    .[0;1;35;95;47m8[0;37;45m@[0;1;31;91;45m8[0;1;35;95;47m8[0;35;5;41;101m.[0;37;5;47;107m..  .    [0;1;37;97;47m [0;32;40m.[0;31;40m [0;1;30;90;40m8[0;37;5;47;107mS. .    [0;1;30;90;47mX[0;31;40m [0;34;40m [0;34;5;40;100m@[0;37;5;47;107m; X[0;1;30;90;47mS[0;35;5;40;100m:[0;1;30;90;40mX[0;32;40m;[0;31;40m;[0;34;40mt[0;1;30;90;40m8[0;33;5;40;100m [0;1;37;97;47mX[0;37;5;47;107m. .:[0;35;5;40;100m [0;31;40m .[0;37;5;40;100m@[0;37;5;47;107m :[0;33;5;40;100m [0;32;40m  [0;37;5;40;100m@[0;37;5;47;107m   :[0;1;37;97;47mt[0;36;5;40;100m [0;32;40m;[0;1;30;90;40mX[0;1;37;97;47m:[0;37;5;47;107m. .[0;1;37;97;47m@[0;37;5;40;100m8[0;30;5;40;100m%[0;1;30;90;40mX[0;34;40m:[0;32;40m:[0;31;40m;[0;1;30;90;40mX[0;30;5;40;100mS[0;1;30;90;47m8[0;37;5;47;107mX     @[0;1;30;90;47mX[0;36;5;40;100m;[0;31;40m%[0;34;40mt[0;32;40m;[0;31;40mt[0;30;5;40;100mX[0;36;5;40;100m [0;31;40m:[0;32;40m.[0;1;30;90;40mS[0;1;37;97;47m8[0;37;5;47;107m . X[0;1;30;90;47m%[0;33;5;40;100m:[0;1;30;90;40mX[0;34;40m;[0;32;40m;[0;31;40mt[0;1;30;90;40m8[0;36;5;40;100m [0;1;37;97;47mS[0;37;5;47;107m [0;1;37;97;47m.[0;30;5;40;100m8[0;1;30;90;40m8S[0;34;40m.[0;32;40m.[0;34;40m:[0;1;30;90;40m@@@[0;30;5;40;100m8[0;1;37;97;47mt[0;37;5;47;107m   [0m
    [0;37;5;47;107m;88.; . ..     .  ..   :t;@8.  .    .:[0;35;5;40;100m [0;31;40m .[0;37;5;40;100m8[0;37;5;47;107m     .:[0;1;37;97;47m [0;1;30;90;40mX[0;31;40m .[0;1;30;90;47m.[0;37;5;47;107m;[0;1;30;90;47m8[0;31;40m;[0;32;40m.:[0;35;5;40;100m.[0;1;30;90;47m8X[0;33;5;40;100m [0;32;40mt[0;31;40m:[0;34;40m:[0;1;30;90;47m;[0;37;5;47;107m  [0;1;37;97;47mX[0;31;40m;[0;34;40m.[0;32;40mt[0;1;37;97;47m8[0;37;5;47;107m [0;1;37;97;47mX[0;31;40m;[0;32;40m:[0;34;40mt[0;1;37;97;47m8[0;37;5;47;107m S[0;1;30;90;47mX[0;30;5;40;100m8[0;32;40m [0;34;40m.[0;30;5;40;100m@[0;1;30;90;47m%[0;37;5;47;107m; [0;1;37;97;47m8[0;35;5;40;100m;[0;32;40m. [0;1;30;90;40m8[0;37;5;40;100m@[0;1;30;90;47m:[0;1;37;97;47m [0;1;30;90;47mt[0;34;5;40;100mS[0;32;40m  [0;33;5;40;100m [0;37;5;47;107m   S[0;37;5;40;100mS[0;34;40m:[0;31;40m.;[0;36;5;40;100m [0;1;30;90;47mt.t[0;36;5;40;100m [0;1;30;90;40mS[0;34;40m.[0;32;40m [0;33;5;40;100m [0;37;5;47;107m  ;[0;1;30;90;47m8[0;1;30;90;40mS[0;34;40m :[0;33;5;40;100m.[0;1;30;90;47m8X[0;36;5;40;100m [0;34;40mt[0;32;40m:[0;31;40m:[0;1;30;90;47mt[0;1;37;97;47m8[0;1;30;90;47m8[0;36;5;40;100m [0;32;40m;[0;31;40m.[0;34;40m:[0;33;5;40;100m [0;1;30;90;47m8[0;37;5;40;100m88[0;1;30;90;47mt[0;37;5;47;107m%  .[0m
    [0;37;5;47;107m %X;   . . .    .   .    .SX:    .   8[0;1;30;90;40mX[0;34;40m :[0;1;37;97;47mS[0;37;5;47;107m   .:[0;1;37;97;47m@[0;33;5;40;100m [0;32;40m.[0;31;40m.[0;32;40m [0;37;5;40;100mS[0;37;5;47;107m.[0;1;30;90;47m8[0;32;40m.[0;34;40m.t[0;1;37;97;47m;[0;37;5;47;107m.   [0;37;5;40;100mX[0;34;40m.[0;31;40m.[0;33;5;40;100m%[0;37;5;47;107m% [0;1;30;90;47m@[0;32;40m.[0;34;40m.[0;35;5;40;100mt[0;37;5;47;107mt [0;1;30;90;47mX[0;34;40m.[0;32;40m.[0;33;5;40;100mt[0;37;5;47;107mt[0;1;37;97;47m;[0;1;30;90;40m8[0;32;40m  [0;31;40m:[0;1;30;90;47m8[0;37;5;47;107m;  8[0;1;30;90;40m8[0;32;40m  [0;33;5;40;100m [0;37;5;47;107m;.  .[0;33;5;40;100m [0;32;40m:[0;31;40m.[0;1;30;90;47m8[0;37;5;47;107m  :[0;36;5;40;100m [0;32;40m.[0;31;40m.[0;1;30;90;40m8[0;1;37;97;47m8[0;37;5;47;107m    t[0;1;30;90;40m8[0;32;40m.[0;34;40m.[0;1;30;90;47m.[0;37;5;47;107m  [0;1;30;90;47m@[0;31;40m  [0;32;40m;[0;1;37;97;47m:[0;37;5;47;107m.   [0;37;5;40;100m8[0;31;40m.[0;32;40m.[0;30;5;40;100mX[0;37;5;47;107m; [0;1;37;97;47mt[0;34;40m:[0;31;40m.[0;30;5;40;100m8[0;37;5;47;107mS.    .  [0m
    [0;1;37;97;47m.[0;1;31;91;5;45;105m8[0;35;5;41;101m.[0;37;5;45;105m@[0;1;35;95;47m@[0;37;5;47;107m8: . .  .    .    ;[0;1;37;97;47mS[0;1;31;91;5;45;105m88[0;35;5;41;101m [0;1;35;95;47m8[0;37;5;47;107m@    .  [0;1;30;90;47m;[0;31;40m.[0;32;40m :[0;31;5;40;100mS[0;36;5;40;100m%[0;35;5;40;100mt[0;33;5;40;100m%[0;30;5;40;100m8[0;1;30;90;40m8[0;34;40m:[0;31;40m.[0;32;40m:[0;30;5;40;100m@[0;1;30;90;47m%[0;37;5;47;107m;[0;1;37;97;47mX[0;1;30;90;40mS[0;32;40m ;[0;1;37;97;47m.[0;37;5;47;107m     [0;1;30;90;47m%[0;31;40m [0;34;40m [0;30;5;40;100m8[0;37;5;47;107m%:[0;36;5;40;100mt[0;31;40m  [0;37;5;40;100m8[0;37;5;47;107m ;[0;36;5;40;100m;[0;31;40m  [0;34;5;40;100m%[0;33;5;40;100m;[0;34;40m:[0;32;40m.[0;31;40m;[0;37;5;40;100mX[0;1;37;97;47m8[0;37;5;47;107m . X[0;35;5;40;100m;[0;32;40m  [0;33;5;40;100m [0;37;5;47;107m;   .S[0;30;5;40;100m8[0;31;40m :[0;1;37;97;47m@[0;37;5;47;107m. [0;1;30;90;47m:[0;31;40m;[0;34;40m:[0;1;30;90;40m@[0;1;37;97;47mX[0;37;5;47;107m     [0;1;30;90;47m:[0;34;40m:[0;32;40m.[0;1;30;90;40m@[0;37;5;47;107m8.[0;1;37;97;47m@[0;1;30;90;40mX[0;31;40m :[0;1;30;90;47m.[0;37;5;47;107m  .  [0;1;30;90;47m;[0;32;40m [0;34;40m [0;30;5;40;100m8[0;37;5;47;107m% [0;37;5;40;100mS[0;31;40m.[0;32;40m [0;33;5;40;100m [0;37;5;47;107m   .     [0m
    [0;37;45mX@[0;37;5;45;105mX[0;31;5;41;101m:[0;37;45m@[0;1;35;95;5;41;101m8[0;1;37;97;47m:[0;37;5;47;107m: .    .    . .8[0;1;31;91;5;45;105m8[0;35;5;41;101m.[0;1;35;95;47m@[0;35;47m8[0;35;5;45;105m.[0;35;5;41;101mt[0;37;5;47;107m8. .   ;[0;35;5;40;100mt[0;32;40m  [0;30;5;40;100m8X88@[0;36;5;40;100m%[0;35;5;40;100m:[0;37;5;40;100m8[0;1;30;90;47m:[0;37;5;47;107m8: .[0;33;5;40;100m [0;32;40m.[0;31;40m.[0;35;5;40;100m [0;37;5;47;107m  .  ;[0;35;5;40;100m [0;31;40m [0;34;40m [0;36;5;40;100m [0;37;5;47;107m [0;1;37;97;47m%[0;31;40m:[0;34;40m [0;1;30;90;40mS[0;37;5;47;107m8 [0;1;37;97;47mt[0;31;40m:[0;32;40m [0;31;40m   .[0;32;40m.[0;1;30;90;40m8[0;37;5;47;107mX   [0;1;37;97;47mX[0;30;5;40;100m8[0;32;40m  [0;1;30;90;40m@[0;37;5;47;107m@ .  .[0;37;5;40;100mX[0;31;40m [0;32;40m [0;36;5;40;100m;[0;37;5;47;107mt [0;1;37;97;47mS[0;1;30;90;40mX[0;32;40m..[0;1;30;90;47mS[0;37;5;47;107m     [0;1;37;97;47m@[0;1;30;90;40m8[0;32;40m [0;31;40m [0;33;5;40;100m [0;37;5;47;107m  [0;37;5;40;100mS[0;31;40m [0;32;40m [0;36;5;40;100m [0;37;5;47;107m.    :[0;33;5;40;100m [0;32;40m [0;34;40m [0;36;5;40;100m [0;37;5;47;107m @[0;1;30;90;40m@[0;32;40m :[0;1;37;97;47m%[0;37;5;47;107m     .  .[0m
    [0;35;47m8[0;35;5;41;101m [0;1;35;95;47m8[0;35;5;41;101m:[0;1;35;95;47m8[0;35;5;41;101m [0;37;5;45;105mX[0;1;37;97;47m [0;37;5;47;107m  . .   .   .;[0;1;35;95;47m8[0;35;5;41;101m;[0;1;35;95;47m8[0;35;5;41;101m;[0;35;47m8[0;35;5;41;101m.[0;1;35;95;47m8[0;37;5;47;107m8:    .[0;1;37;97;47m@[0;32;40m;[0;31;40m [0;32;40m;[0;1;37;97;47m8[0;37;5;47;107m.  .:.  .   [0;33;5;40;100m [0;31;40m [0;34;40m.[0;37;5;40;100m8[0;37;5;47;107m    .[0;1;30;90;47m.[0;31;40m.[0;34;40m t[0;37;5;47;107m8 [0;37;5;40;100m8[0;34;40m  [0;33;5;40;100m.[0;37;5;47;107m: [0;37;5;40;100m8[0;32;40m  [0;31;40m ;[0;1;30;90;47m%[0;36;5;40;100m [0;34;40m.[0;32;40m.[0;1;37;97;47m;[0;37;5;47;107m .[0;1;37;97;47m8[0;1;30;90;40m8[0;32;40m   [0;30;5;40;100m@[0;37;5;47;107m;   .[0;1;37;97;47m;[0;32;40m:[0;31;40m. [0;37;5;40;100m8[0;37;5;47;107m t[0;30;5;40;100mS[0;34;40m  .[0;1;37;97;47m;[0;37;5;47;107m   .%[0;36;5;40;100m%[0;31;40m  .[0;1;37;97;47m [0;37;5;47;107m :[0;33;5;40;100m:[0;34;40m  [0;37;5;40;100m@[0;37;5;47;107m  .  [0;1;30;90;47m [0;32;40m:[0;34;40m.[0;31;40m;[0;1;37;97;47m8[0;37;5;47;107m [0;1;37;97;47m:[0;34;40m.[0;31;40m.[0;1;30;90;40m8[0;37;5;47;107mS ..[0;1;30;90;47m:[0;37;5;40;100mS[0;37;5;47;107m8.  [0m
    [0;37;5;47;107m8[0;37;5;45;105m@[0;35;5;41;101m%[0;1;35;95;47m8[0;1;31;91;45m8[0;1;35;95;47m8[0;35;5;41;101m [0;1;35;95;47m@[0;37;5;47;107mt      .  .  [0;1;37;97;47m%[0;35;5;41;101m [0;1;35;95;47m8[0;37;45mS[0;1;31;91;5;45;105m8[0;35;47m8[0;35;5;41;101m [0;1;37;97;47m8[0;37;5;47;107m:   .  [0;1;30;90;47mX[0;31;40m.[0;34;40m.[0;35;5;40;100mS[0;37;5;47;107mS  .    .   .[0;37;5;40;100m@[0;31;40m  [0;30;5;40;100m@[0;1;37;97;47m8[0;37;5;47;107m.:@[0;1;30;90;47m@[0;1;30;90;40mS[0;34;40m [0;32;40m;[0;1;30;90;47m;[0;37;5;47;107m.t[0;30;5;40;100mX[0;34;40m  [0;1;30;90;47mS[0;37;5;47;107m t[0;30;5;40;100mX[0;32;40m  [0;36;5;40;100m [0;37;5;47;107mX [0;1;37;97;47m [0;32;40m.[0;34;40m.[0;37;5;40;100mX[0;37;5;47;107m%[0;1;30;90;47m.[0;1;30;90;40m8[0;34;40m.[0;1;30;90;40m8[0;32;40m:[0;31;40m [0;32;40m;[0;1;37;97;47m;[0;37;5;47;107m::X[0;1;30;90;47mS[0;1;30;90;40m@[0;31;40m.[0;34;40m [0;31;40m [0;1;30;90;47mt[0;37;5;47;107m@[0;33;5;40;100m [0;31;40m.[0;34;40m.[0;32;40m  [0;33;5;40;100m [0;37;5;47;107m;.%[0;1;37;97;47m:[0;30;5;40;100mX[0;31;40m.. [0;32;40m.[0;1;37;97;47m:[0;37;5;47;107m@[0;35;5;40;100m [0;34;40m;[0;32;40m  [0;30;5;40;100m8[0;1;37;97;47m8[0;37;5;47;107m:.@[0;1;30;90;47mX[0;1;30;90;40mX[0;31;40m.[0;34;40m;[0;1;30;90;47m%[0;37;5;47;107m. [0;1;30;90;47m.[0;32;40m.[0;34;40m [0;1;30;90;40m8[0;37;5;47;107m8;[0;1;37;97;47mX[0;33;5;40;100m [0;32;40m.[0;31;40m.[0;1;30;90;47m%[0;37;5;47;107m   [0m
    [0;37;5;47;107m @[0;1;35;95;47mX[0;35;5;41;101m:[0;1;35;95;47m8[0;35;5;41;101m;[0;1;35;95;47m8[0;37;5;41;101m8[0;37;5;47;107m  :@8[0;1;37;97;47m;;tS[0;37;5;47;107m8%. 8[0;35;5;45;105m:[0;35;5;41;101mt[0;35;47m8[0;35;5;41;101m [0;1;35;95;47m8[0;37;5;47;107mS.  .   t[0;31;5;40;100mS[0;34;40m [0;32;40m [0;1;30;90;47mX[0;37;5;47;107m     .    .  S[0;33;5;40;100m [0;31;40m:[0;32;40m.[0;31;40m:[0;1;30;90;40m@X[0;31;40m.[0;32;40m.[0;34;40m;[0;33;5;40;100m [0;37;5;47;107m8. [0;1;37;97;47m;[0;31;40m.[0;34;40m.[0;1;30;90;40m8[0;37;5;47;107m@ [0;1;37;97;47m;[0;32;40m.[0;34;40m.[0;1;30;90;40m8[0;37;5;47;107mS. %[0;30;5;40;100mS[0;31;40m [0;34;40m.[0;32;40m;[0;34;40m:[0;1;30;90;40m@[0;1;30;90;47mS[0;37;5;47;107mt[0;37;5;40;100m8[0;31;40m;[0;34;40m:[0;31;40m.[0;1;30;90;40mXX[0;32;40m:[0;31;40m;[0;37;5;40;100mX[0;1;30;90;47m@[0;34;40m.[0;31;40m :[0;32;40m;[0;34;40m:[0;33;5;40;100m.[0;1;30;90;47m;[0;1;30;90;40m8[0;32;40m.[0;31;40m.[0;32;40mt[0;1;30;90;40m8[0;34;40m;[0;32;40m:[0;30;5;40;100m@[0;1;37;97;47m.[0;33;5;40;100m:[0;34;40m  :[0;31;40m;[0;32;40mt[0;35;5;40;100m:[0;33;5;40;100m.[0;34;40m.[0;32;40m [0;34;40m.[0;1;30;90;40m@X[0;34;40m:[0;31;40m.[0;32;40m:[0;35;5;40;100m [0;1;37;97;47m8[0;37;5;47;107m   @[0;30;5;40;100m@[0;34;40m  ;[0;1;30;90;40mX[0;31;40m .[0;30;5;40;100m@[0;1;37;97;47m [0;37;5;47;107m..  [0m
    [0;37;5;47;107m   :[0;1;37;97;47m%[0;1;35;95;47mS[0;1;37;97;47m:[0;37;5;47;107m; [0;1;37;97;47mX[0;1;31;91;5;45;105m8[0;35;5;41;101m.[0;35;5;45;105m.[0;35;5;41;101m [0;35;5;45;105m [0;35;5;41;101m [0;35;5;45;105m [0;35;5;41;101m.[0;37;5;45;105m@[0;1;35;95;47m8[0;37;5;47;107m8X[0;1;37;97;47mt;[0;1;35;95;47mS[0;37;5;47;107mtt  .    ..[0;1;30;90;47m%[0;36;5;40;100m.[0;1;30;90;47m@[0;37;5;47;107mt .    .        8[0;1;30;90;47mt[0;37;5;40;100m@[0;36;5;40;100m [0;37;5;40;100m@[0;1;30;90;47m@[0;1;37;97;47m;[0;37;5;47;107mt    X[0;1;30;90;47m8[0;33;5;40;100m [0;1;37;97;47m@[0;37;5;47;107m .X[0;1;30;90;47m8[0;37;5;40;100m%[0;1;37;97;47mS[0;37;5;47;107m    S[0;1;30;90;47mS[0;37;5;40;100mS@[0;1;30;90;47m:[0;37;5;47;107m%   8[0;1;30;90;47m%[0;37;5;40;100mS[0;36;5;40;100m [0;1;30;90;47m8.[0;37;5;47;107mX .[0;1;37;97;47mt[0;37;5;40;100m@S[0;1;30;90;47m@[0;1;37;97;47mX[0;37;5;47;107m. t[0;1;37;97;47m.[0;37;5;40;100m8[0;35;5;40;100m [0;37;5;40;100m8[0;1;30;90;47mS[0;1;37;97;47m@[0;37;5;47;107m: S[0;1;30;90;47m%[0;37;5;40;100mSS[0;1;30;90;47mS[0;1;37;97;47m8[0;37;5;47;107m..8[0;1;30;90;47mt[0;37;5;40;100mX[0;33;5;40;100m [0;37;5;40;100mX[0;1;30;90;47m@[0;1;37;97;47m:[0;37;5;47;107m%    . t[0;1;37;97;47m [0;37;5;40;100m8[0;33;5;40;100m [0;37;5;40;100m8[0;1;30;90;47m%[0;1;37;97;47m8[0;37;5;47;107m..   .[0m
    [0;37;5;47;107m   . .  :[0;1;31;91;5;45;105m8[0;35;47m88[0;35;5;41;101m [0;1;35;95;47m8[0;35;5;41;101mS[0;35;47m8[0;35;5;41;101m:[0;1;35;95;47m8[0;35;5;41;101mt;[0;37;5;47;107mt.. .  .    .          .    . .   . .       .  .      .  . .      .         .    .   .                 .                       .  [0m
    [0;37;5;47;107m  .      8[0;37;5;45;105m8[0;37;5;41;101m8[0;37;5;45;105m@[0;35;5;41;101mS[0;1;35;95;47m8[0;35;5;41;101m;[0;1;35;95;47m8[0;1;31;91;45m8[0;1;35;95;47m%[0;1;37;97;47m8[0;37;5;47;107m:    .    .          .   .      .        .                   . .    . .       .    .          . .    .       .  . .  .     .      [0m
    [0;37;5;47;107m     .  .: ;X@8;@..   .     .   . .  . .       .  .   .    .   . .     . . .  .      .        .     .     .           .    .       .            . .  .[0m
    [0;37;5;47;107m  .   . ..  . .  .      .  .              . .   .   .   .    .     .         .  .  .   .  .    . .    . .       . .  .  .     . .     . .   . .       [0m
    
    "#;
    println!("{}", logo);

    let args = Opts::from_args();

    let mut action = Call::SetValue(0);
    match args.action.as_str() {
        "new" => {
            let output = render(Options {
                text: String::from("Welcome to your CLI wallet!"),
                font: Fonts::FontBlock,
                max_length: 10,
                align: Align::Center,
                gradient: vec!["#D2146E".to_string(),"#f0f0f0".to_string()], 
                ..Options::default()
            });
            println!("{}", output.text);

            let output = render(Options {
                text: String::from("Let's get started by creating a new account --"),
                font: Fonts::FontConsole,
                gradient: vec!["#D2146E".to_string(),"#f0f0f0".to_string()], 
                ..Options::default()
            });
            println!("{}", output.text);

            let address_prompt = render(Options {
                text: String::from("Enter an address: "),
                font: Fonts::FontConsole,
                spaceless: true, 
                gradient: vec!["#D2146E".to_string(),"#f0f0f0".to_string()], 
                ..Options::default()
            });

            let initial_balance_prompt = render(Options {
                text: String::from("Enter your initial balance (yes, this is utopia, you create your own starting balance!): "),
                font: Fonts::FontConsole,
                spaceless: true, 
                gradient: vec!["#D2146E".to_string(),"#f0f0f0".to_string()], 
                ..Options::default()
            });
        
            let address = get_input(address_prompt.text.as_str());
            let initial_balance = get_input(initial_balance_prompt.text.as_str());
            action = Call::AddAccount(address.parse().unwrap(), initial_balance.parse().unwrap());
        },
        "send" => {
            let output = render(Options {
                text: String::from("Welcome to your CLI wallet!"),
                font: Fonts::FontBlock,
                max_length: 10,
                align: Align::Center,
                gradient: vec!["#D2146E".to_string(),"#f0f0f0".to_string()], 
                ..Options::default()
            });
            println!("{}", output.text);

            let output = render(Options {
                text: String::from("Let's get started sending someone special some money --"),
                font: Fonts::FontConsole,
                gradient: vec!["#D2146E".to_string(),"#f0f0f0".to_string()], 
                ..Options::default()
            });
            println!("{}", output.text);

            let from_prompt = render(Options {
                text: String::from("Enter the from address: "),
                font: Fonts::FontConsole,
                spaceless: true, 
                gradient: vec!["#D2146E".to_string(),"#f0f0f0".to_string()], 
                ..Options::default()
            });

            let to_prompt = render(Options {
                text: String::from("Enter the recipient address: "),
                font: Fonts::FontConsole,
                spaceless: true, 
                gradient: vec!["#D2146E".to_string(),"#f0f0f0".to_string()], 
                ..Options::default()
            });

            let amount_prompt = render(Options {
                text: String::from("Enter the amount: "),
                font: Fonts::FontConsole,
                spaceless: true, 
                gradient: vec!["#D2146E".to_string(),"#f0f0f0".to_string()], 
                ..Options::default()
            });


            let from = get_input(from_prompt.text.as_str());
            let to = get_input(to_prompt.text.as_str());
            let amount = get_input(amount_prompt.text.as_str());
            action = Call::Transfer(from.parse().unwrap(), to.parse().unwrap(), amount.parse().unwrap());
        },
        _ => {
            println!("Invalid action. Valid actions are: new, send");
            return Ok(());
        },
    };
    
    let extrinsic = BasicExtrinsic(action);
    let extrinsic_encoded = HexDisplay::from(&extrinsic.encode()).to_string();

    let request = json!({
        "jsonrpc": "2.0",
        "method": "author_submitExtrinsic",
        "params": [extrinsic_encoded],
        "id": 1
    });
    
    let request = request.to_string();

    let client = Client::new();
    
    let response = client.post("http://127.0.0.1:9933")
        .header("Content-Type", "application/json")
        .body(request)
        .send().await?;

    let decoded_response = match ReturnData::decode(&mut response.bytes().await?.as_ref()) {
        Ok(decoded) => {
            let success_message = render(Options {
                text: String::from("Success!"),
                font: Fonts::FontBlock,
                max_length: 10,
                align: Align::Center,
                gradient: vec!["#D2146E".to_string(),"#f0f0f0".to_string()], 
                ..Options::default()
            });
            println!("{}", success_message.text);
            decoded
        },
        Err(e) => return Err(CliError::CodecError(e)),
    };
    
    Ok(())
}

fn get_input(prompt: &str) -> String {
    println!("{}", prompt);
    let mut input = String::new();
    io::stdin().read_line(&mut input).unwrap();
    input.trim().to_string()
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_encode() {
        let action = Call::AddAccount(4, 10);
        let extrinsic = BasicExtrinsic(action);
        let extrinsic_encoded = HexDisplay::from(&extrinsic.encode()).to_string();
        assert_eq!(extrinsic_encoded, "01040a000000000000000000000000000000");
    }
}